// Copyright Â© 2018 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: router.proto

package ttnpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Modulation int32

const (
	Modulation_LORA Modulation = 0
	Modulation_FSK  Modulation = 1
)

// Enum value maps for Modulation.
var (
	Modulation_name = map[int32]string{
		0: "LORA",
		1: "FSK",
	}
	Modulation_value = map[string]int32{
		"LORA": 0,
		"FSK":  1,
	}
)

func (x Modulation) Enum() *Modulation {
	p := new(Modulation)
	*p = x
	return p
}

func (x Modulation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Modulation) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[0].Descriptor()
}

func (Modulation) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[0]
}

func (x Modulation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Modulation.Descriptor instead.
func (Modulation) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

type FrequencyPlan int32

const (
	FrequencyPlan_EU_863_870 FrequencyPlan = 0
	FrequencyPlan_US_902_928 FrequencyPlan = 1
	FrequencyPlan_CN_779_787 FrequencyPlan = 2
	FrequencyPlan_EU_433     FrequencyPlan = 3
	FrequencyPlan_AU_915_928 FrequencyPlan = 4
	FrequencyPlan_CN_470_510 FrequencyPlan = 5
	FrequencyPlan_AS_923     FrequencyPlan = 6
	FrequencyPlan_AS_920_923 FrequencyPlan = 61
	FrequencyPlan_AS_923_925 FrequencyPlan = 62
	FrequencyPlan_KR_920_923 FrequencyPlan = 7
	FrequencyPlan_IN_865_867 FrequencyPlan = 8
	FrequencyPlan_RU_864_870 FrequencyPlan = 9
)

// Enum value maps for FrequencyPlan.
var (
	FrequencyPlan_name = map[int32]string{
		0:  "EU_863_870",
		1:  "US_902_928",
		2:  "CN_779_787",
		3:  "EU_433",
		4:  "AU_915_928",
		5:  "CN_470_510",
		6:  "AS_923",
		61: "AS_920_923",
		62: "AS_923_925",
		7:  "KR_920_923",
		8:  "IN_865_867",
		9:  "RU_864_870",
	}
	FrequencyPlan_value = map[string]int32{
		"EU_863_870": 0,
		"US_902_928": 1,
		"CN_779_787": 2,
		"EU_433":     3,
		"AU_915_928": 4,
		"CN_470_510": 5,
		"AS_923":     6,
		"AS_920_923": 61,
		"AS_923_925": 62,
		"KR_920_923": 7,
		"IN_865_867": 8,
		"RU_864_870": 9,
	}
)

func (x FrequencyPlan) Enum() *FrequencyPlan {
	p := new(FrequencyPlan)
	*p = x
	return p
}

func (x FrequencyPlan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrequencyPlan) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[1].Descriptor()
}

func (FrequencyPlan) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[1]
}

func (x FrequencyPlan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrequencyPlan.Descriptor instead.
func (FrequencyPlan) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{1}
}

type LocationMetadata_LocationSource int32

const (
	LocationMetadata_UNKNOWN        LocationMetadata_LocationSource = 0
	LocationMetadata_GPS            LocationMetadata_LocationSource = 1
	LocationMetadata_CONFIG         LocationMetadata_LocationSource = 2
	LocationMetadata_REGISTRY       LocationMetadata_LocationSource = 3
	LocationMetadata_IP_GEOLOCATION LocationMetadata_LocationSource = 4
)

// Enum value maps for LocationMetadata_LocationSource.
var (
	LocationMetadata_LocationSource_name = map[int32]string{
		0: "UNKNOWN",
		1: "GPS",
		2: "CONFIG",
		3: "REGISTRY",
		4: "IP_GEOLOCATION",
	}
	LocationMetadata_LocationSource_value = map[string]int32{
		"UNKNOWN":        0,
		"GPS":            1,
		"CONFIG":         2,
		"REGISTRY":       3,
		"IP_GEOLOCATION": 4,
	}
)

func (x LocationMetadata_LocationSource) Enum() *LocationMetadata_LocationSource {
	p := new(LocationMetadata_LocationSource)
	*p = x
	return p
}

func (x LocationMetadata_LocationSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationMetadata_LocationSource) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[2].Descriptor()
}

func (LocationMetadata_LocationSource) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[2]
}

func (x LocationMetadata_LocationSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationMetadata_LocationSource.Descriptor instead.
func (LocationMetadata_LocationSource) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{7, 0}
}

type UplinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// ProtocolMessage message = 2;
	ProtocolMetadata *ProtocolRxMetadata `protobuf:"bytes,11,opt,name=protocol_metadata,json=protocolMetadata,proto3" json:"protocol_metadata,omitempty"`
	GatewayMetadata  *GatewayRxMetadata  `protobuf:"bytes,12,opt,name=gateway_metadata,json=gatewayMetadata,proto3" json:"gateway_metadata,omitempty"`
	Trace            *Trace              `protobuf:"bytes,21,opt,name=trace,proto3" json:"trace,omitempty"`
}

func (x *UplinkMessage) Reset() {
	*x = UplinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessage) ProtoMessage() {}

func (x *UplinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessage.ProtoReflect.Descriptor instead.
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

func (x *UplinkMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *UplinkMessage) GetProtocolMetadata() *ProtocolRxMetadata {
	if x != nil {
		return x.ProtocolMetadata
	}
	return nil
}

func (x *UplinkMessage) GetGatewayMetadata() *GatewayRxMetadata {
	if x != nil {
		return x.GatewayMetadata
	}
	return nil
}

func (x *UplinkMessage) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

type DownlinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// ProtocolMessage message = 2;
	ProtocolConfiguration *ProtocolTxConfiguration `protobuf:"bytes,11,opt,name=protocol_configuration,json=protocolConfiguration,proto3" json:"protocol_configuration,omitempty"`
	GatewayConfiguration  *GatewayTxConfiguration  `protobuf:"bytes,12,opt,name=gateway_configuration,json=gatewayConfiguration,proto3" json:"gateway_configuration,omitempty"`
	Trace                 *Trace                   `protobuf:"bytes,21,opt,name=trace,proto3" json:"trace,omitempty"`
}

func (x *DownlinkMessage) Reset() {
	*x = DownlinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkMessage) ProtoMessage() {}

func (x *DownlinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkMessage.ProtoReflect.Descriptor instead.
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{1}
}

func (x *DownlinkMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DownlinkMessage) GetProtocolConfiguration() *ProtocolTxConfiguration {
	if x != nil {
		return x.ProtocolConfiguration
	}
	return nil
}

func (x *DownlinkMessage) GetGatewayConfiguration() *GatewayTxConfiguration {
	if x != nil {
		return x.GatewayConfiguration
	}
	return nil
}

func (x *DownlinkMessage) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time        int64             `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	ServiceId   string            `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceName string            `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Event       string            `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Parents     []*Trace          `protobuf:"bytes,11,rep,name=parents,proto3" json:"parents,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{2}
}

func (x *Trace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trace) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Trace) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Trace) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Trace) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Trace) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Trace) GetParents() []*Trace {
	if x != nil {
		return x.Parents
	}
	return nil
}

type ProtocolRxMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lorawan *LoRaWANMetadata `protobuf:"bytes,1,opt,name=lorawan,proto3" json:"lorawan,omitempty"`
}

func (x *ProtocolRxMetadata) Reset() {
	*x = ProtocolRxMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolRxMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolRxMetadata) ProtoMessage() {}

func (x *ProtocolRxMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolRxMetadata.ProtoReflect.Descriptor instead.
func (*ProtocolRxMetadata) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{3}
}

func (x *ProtocolRxMetadata) GetLorawan() *LoRaWANMetadata {
	if x != nil {
		return x.Lorawan
	}
	return nil
}

type ProtocolTxConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lorawan *LoRaWANTxConfiguration `protobuf:"bytes,1,opt,name=lorawan,proto3" json:"lorawan,omitempty"`
}

func (x *ProtocolTxConfiguration) Reset() {
	*x = ProtocolTxConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolTxConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolTxConfiguration) ProtoMessage() {}

func (x *ProtocolTxConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolTxConfiguration.ProtoReflect.Descriptor instead.
func (*ProtocolTxConfiguration) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{4}
}

func (x *ProtocolTxConfiguration) GetLorawan() *LoRaWANTxConfiguration {
	if x != nil {
		return x.Lorawan
	}
	return nil
}

type LoRaWANMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modulation    Modulation    `protobuf:"varint,11,opt,name=modulation,proto3,enum=router.Modulation" json:"modulation,omitempty"`
	DataRate      string        `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	BitRate       uint32        `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	CodingRate    string        `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	FCnt          uint32        `protobuf:"varint,15,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FrequencyPlan FrequencyPlan `protobuf:"varint,16,opt,name=frequency_plan,json=frequencyPlan,proto3,enum=router.FrequencyPlan" json:"frequency_plan,omitempty"`
}

func (x *LoRaWANMetadata) Reset() {
	*x = LoRaWANMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoRaWANMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoRaWANMetadata) ProtoMessage() {}

func (x *LoRaWANMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoRaWANMetadata.ProtoReflect.Descriptor instead.
func (*LoRaWANMetadata) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{5}
}

func (x *LoRaWANMetadata) GetModulation() Modulation {
	if x != nil {
		return x.Modulation
	}
	return Modulation_LORA
}

func (x *LoRaWANMetadata) GetDataRate() string {
	if x != nil {
		return x.DataRate
	}
	return ""
}

func (x *LoRaWANMetadata) GetBitRate() uint32 {
	if x != nil {
		return x.BitRate
	}
	return 0
}

func (x *LoRaWANMetadata) GetCodingRate() string {
	if x != nil {
		return x.CodingRate
	}
	return ""
}

func (x *LoRaWANMetadata) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *LoRaWANMetadata) GetFrequencyPlan() FrequencyPlan {
	if x != nil {
		return x.FrequencyPlan
	}
	return FrequencyPlan_EU_863_870
}

type LoRaWANTxConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modulation Modulation `protobuf:"varint,11,opt,name=modulation,proto3,enum=router.Modulation" json:"modulation,omitempty"`
	DataRate   string     `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	BitRate    uint32     `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	CodingRate string     `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	FCnt       uint32     `protobuf:"varint,15,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
}

func (x *LoRaWANTxConfiguration) Reset() {
	*x = LoRaWANTxConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoRaWANTxConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoRaWANTxConfiguration) ProtoMessage() {}

func (x *LoRaWANTxConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoRaWANTxConfiguration.ProtoReflect.Descriptor instead.
func (*LoRaWANTxConfiguration) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{6}
}

func (x *LoRaWANTxConfiguration) GetModulation() Modulation {
	if x != nil {
		return x.Modulation
	}
	return Modulation_LORA
}

func (x *LoRaWANTxConfiguration) GetDataRate() string {
	if x != nil {
		return x.DataRate
	}
	return ""
}

func (x *LoRaWANTxConfiguration) GetBitRate() uint32 {
	if x != nil {
		return x.BitRate
	}
	return 0
}

func (x *LoRaWANTxConfiguration) GetCodingRate() string {
	if x != nil {
		return x.CodingRate
	}
	return ""
}

func (x *LoRaWANTxConfiguration) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

type LocationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      int64                           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Latitude  float32                         `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32                         `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude  int32                           `protobuf:"varint,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Accuracy  int32                           `protobuf:"varint,5,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Source    LocationMetadata_LocationSource `protobuf:"varint,6,opt,name=source,proto3,enum=router.LocationMetadata_LocationSource" json:"source,omitempty"`
}

func (x *LocationMetadata) Reset() {
	*x = LocationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMetadata) ProtoMessage() {}

func (x *LocationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMetadata.ProtoReflect.Descriptor instead.
func (*LocationMetadata) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{7}
}

func (x *LocationMetadata) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LocationMetadata) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LocationMetadata) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LocationMetadata) GetAltitude() int32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *LocationMetadata) GetAccuracy() int32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *LocationMetadata) GetSource() LocationMetadata_LocationSource {
	if x != nil {
		return x.Source
	}
	return LocationMetadata_UNKNOWN
}

type GatewayRxMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId      string                       `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	GatewayTrusted bool                         `protobuf:"varint,2,opt,name=gateway_trusted,json=gatewayTrusted,proto3" json:"gateway_trusted,omitempty"`
	Timestamp      uint32                       `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Time           int64                        `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`
	EncryptedTime  []byte                       `protobuf:"bytes,13,opt,name=encrypted_time,json=encryptedTime,proto3" json:"encrypted_time,omitempty"`
	RfChain        uint32                       `protobuf:"varint,21,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	Channel        uint32                       `protobuf:"varint,22,opt,name=channel,proto3" json:"channel,omitempty"`
	Antennas       []*GatewayRxMetadata_Antenna `protobuf:"bytes,30,rep,name=antennas,proto3" json:"antennas,omitempty"`
	Frequency      uint64                       `protobuf:"varint,31,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Rssi           float32                      `protobuf:"fixed32,32,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Snr            float32                      `protobuf:"fixed32,33,opt,name=snr,proto3" json:"snr,omitempty"`
	Location       *LocationMetadata            `protobuf:"bytes,41,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *GatewayRxMetadata) Reset() {
	*x = GatewayRxMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRxMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRxMetadata) ProtoMessage() {}

func (x *GatewayRxMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRxMetadata.ProtoReflect.Descriptor instead.
func (*GatewayRxMetadata) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{8}
}

func (x *GatewayRxMetadata) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *GatewayRxMetadata) GetGatewayTrusted() bool {
	if x != nil {
		return x.GatewayTrusted
	}
	return false
}

func (x *GatewayRxMetadata) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GatewayRxMetadata) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GatewayRxMetadata) GetEncryptedTime() []byte {
	if x != nil {
		return x.EncryptedTime
	}
	return nil
}

func (x *GatewayRxMetadata) GetRfChain() uint32 {
	if x != nil {
		return x.RfChain
	}
	return 0
}

func (x *GatewayRxMetadata) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *GatewayRxMetadata) GetAntennas() []*GatewayRxMetadata_Antenna {
	if x != nil {
		return x.Antennas
	}
	return nil
}

func (x *GatewayRxMetadata) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GatewayRxMetadata) GetRssi() float32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *GatewayRxMetadata) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *GatewayRxMetadata) GetLocation() *LocationMetadata {
	if x != nil {
		return x.Location
	}
	return nil
}

type GatewayTxConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp             uint32 `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RfChain               uint32 `protobuf:"varint,21,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	Frequency             uint64 `protobuf:"varint,22,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Power                 int32  `protobuf:"varint,23,opt,name=power,proto3" json:"power,omitempty"`
	PolarizationInversion bool   `protobuf:"varint,31,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
	FrequencyDeviation    uint32 `protobuf:"varint,32,opt,name=frequency_deviation,json=frequencyDeviation,proto3" json:"frequency_deviation,omitempty"`
}

func (x *GatewayTxConfiguration) Reset() {
	*x = GatewayTxConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayTxConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayTxConfiguration) ProtoMessage() {}

func (x *GatewayTxConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayTxConfiguration.ProtoReflect.Descriptor instead.
func (*GatewayTxConfiguration) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{9}
}

func (x *GatewayTxConfiguration) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GatewayTxConfiguration) GetRfChain() uint32 {
	if x != nil {
		return x.RfChain
	}
	return 0
}

func (x *GatewayTxConfiguration) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GatewayTxConfiguration) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *GatewayTxConfiguration) GetPolarizationInversion() bool {
	if x != nil {
		return x.PolarizationInversion
	}
	return false
}

func (x *GatewayTxConfiguration) GetFrequencyDeviation() uint32 {
	if x != nil {
		return x.FrequencyDeviation
	}
	return 0
}

type StatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      uint32                   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Time           int64                    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	GatewayTrusted bool                     `protobuf:"varint,3,opt,name=gateway_trusted,json=gatewayTrusted,proto3" json:"gateway_trusted,omitempty"`
	BootTime       int64                    `protobuf:"varint,4,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	Ip             []string                 `protobuf:"bytes,11,rep,name=ip,proto3" json:"ip,omitempty"`
	Platform       string                   `protobuf:"bytes,12,opt,name=platform,proto3" json:"platform,omitempty"`
	ContactEmail   string                   `protobuf:"bytes,13,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	Description    string                   `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	FrequencyPlan  string                   `protobuf:"bytes,15,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	Bridge         string                   `protobuf:"bytes,16,opt,name=bridge,proto3" json:"bridge,omitempty"`
	Router         string                   `protobuf:"bytes,17,opt,name=router,proto3" json:"router,omitempty"`
	Fpga           uint32                   `protobuf:"varint,18,opt,name=fpga,proto3" json:"fpga,omitempty"`
	Dsp            uint32                   `protobuf:"varint,19,opt,name=dsp,proto3" json:"dsp,omitempty"`
	Hal            string                   `protobuf:"bytes,20,opt,name=hal,proto3" json:"hal,omitempty"`
	Location       *LocationMetadata        `protobuf:"bytes,21,opt,name=location,proto3" json:"location,omitempty"`
	Rtt            uint32                   `protobuf:"varint,31,opt,name=rtt,proto3" json:"rtt,omitempty"`
	RxIn           uint32                   `protobuf:"varint,41,opt,name=rx_in,json=rxIn,proto3" json:"rx_in,omitempty"`
	RxOk           uint32                   `protobuf:"varint,42,opt,name=rx_ok,json=rxOk,proto3" json:"rx_ok,omitempty"`
	TxIn           uint32                   `protobuf:"varint,43,opt,name=tx_in,json=txIn,proto3" json:"tx_in,omitempty"`
	TxOk           uint32                   `protobuf:"varint,44,opt,name=tx_ok,json=txOk,proto3" json:"tx_ok,omitempty"`
	LmOk           uint32                   `protobuf:"varint,45,opt,name=lm_ok,json=lmOk,proto3" json:"lm_ok,omitempty"`
	LmSt           uint32                   `protobuf:"varint,46,opt,name=lm_st,json=lmSt,proto3" json:"lm_st,omitempty"`
	LmNw           uint32                   `protobuf:"varint,47,opt,name=lm_nw,json=lmNw,proto3" json:"lm_nw,omitempty"`
	LPps           uint32                   `protobuf:"varint,48,opt,name=l_pps,json=lPps,proto3" json:"l_pps,omitempty"`
	Os             *StatusMessage_OSMetrics `protobuf:"bytes,51,opt,name=os,proto3" json:"os,omitempty"`
	Messages       []string                 `protobuf:"bytes,52,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *StatusMessage) Reset() {
	*x = StatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessage) ProtoMessage() {}

func (x *StatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessage.ProtoReflect.Descriptor instead.
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{10}
}

func (x *StatusMessage) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StatusMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StatusMessage) GetGatewayTrusted() bool {
	if x != nil {
		return x.GatewayTrusted
	}
	return false
}

func (x *StatusMessage) GetBootTime() int64 {
	if x != nil {
		return x.BootTime
	}
	return 0
}

func (x *StatusMessage) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *StatusMessage) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *StatusMessage) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *StatusMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StatusMessage) GetFrequencyPlan() string {
	if x != nil {
		return x.FrequencyPlan
	}
	return ""
}

func (x *StatusMessage) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *StatusMessage) GetRouter() string {
	if x != nil {
		return x.Router
	}
	return ""
}

func (x *StatusMessage) GetFpga() uint32 {
	if x != nil {
		return x.Fpga
	}
	return 0
}

func (x *StatusMessage) GetDsp() uint32 {
	if x != nil {
		return x.Dsp
	}
	return 0
}

func (x *StatusMessage) GetHal() string {
	if x != nil {
		return x.Hal
	}
	return ""
}

func (x *StatusMessage) GetLocation() *LocationMetadata {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *StatusMessage) GetRtt() uint32 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *StatusMessage) GetRxIn() uint32 {
	if x != nil {
		return x.RxIn
	}
	return 0
}

func (x *StatusMessage) GetRxOk() uint32 {
	if x != nil {
		return x.RxOk
	}
	return 0
}

func (x *StatusMessage) GetTxIn() uint32 {
	if x != nil {
		return x.TxIn
	}
	return 0
}

func (x *StatusMessage) GetTxOk() uint32 {
	if x != nil {
		return x.TxOk
	}
	return 0
}

func (x *StatusMessage) GetLmOk() uint32 {
	if x != nil {
		return x.LmOk
	}
	return 0
}

func (x *StatusMessage) GetLmSt() uint32 {
	if x != nil {
		return x.LmSt
	}
	return 0
}

func (x *StatusMessage) GetLmNw() uint32 {
	if x != nil {
		return x.LmNw
	}
	return 0
}

func (x *StatusMessage) GetLPps() uint32 {
	if x != nil {
		return x.LPps
	}
	return 0
}

func (x *StatusMessage) GetOs() *StatusMessage_OSMetrics {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *StatusMessage) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

type GatewayRxMetadata_Antenna struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Antenna               uint32  `protobuf:"varint,1,opt,name=antenna,proto3" json:"antenna,omitempty"`
	Channel               uint32  `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Rssi                  float32 `protobuf:"fixed32,3,opt,name=rssi,proto3" json:"rssi,omitempty"`
	ChannelRssi           float32 `protobuf:"fixed32,5,opt,name=channel_rssi,json=channelRssi,proto3" json:"channel_rssi,omitempty"`
	RssiStandardDeviation float32 `protobuf:"fixed32,6,opt,name=rssi_standard_deviation,json=rssiStandardDeviation,proto3" json:"rssi_standard_deviation,omitempty"`
	FrequencyOffset       int64   `protobuf:"varint,7,opt,name=frequency_offset,json=frequencyOffset,proto3" json:"frequency_offset,omitempty"`
	Snr                   float32 `protobuf:"fixed32,4,opt,name=snr,proto3" json:"snr,omitempty"`
	EncryptedTime         []byte  `protobuf:"bytes,10,opt,name=encrypted_time,json=encryptedTime,proto3" json:"encrypted_time,omitempty"`
	FineTime              int64   `protobuf:"varint,11,opt,name=fine_time,json=fineTime,proto3" json:"fine_time,omitempty"`
}

func (x *GatewayRxMetadata_Antenna) Reset() {
	*x = GatewayRxMetadata_Antenna{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRxMetadata_Antenna) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRxMetadata_Antenna) ProtoMessage() {}

func (x *GatewayRxMetadata_Antenna) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRxMetadata_Antenna.ProtoReflect.Descriptor instead.
func (*GatewayRxMetadata_Antenna) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GatewayRxMetadata_Antenna) GetAntenna() uint32 {
	if x != nil {
		return x.Antenna
	}
	return 0
}

func (x *GatewayRxMetadata_Antenna) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *GatewayRxMetadata_Antenna) GetRssi() float32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *GatewayRxMetadata_Antenna) GetChannelRssi() float32 {
	if x != nil {
		return x.ChannelRssi
	}
	return 0
}

func (x *GatewayRxMetadata_Antenna) GetRssiStandardDeviation() float32 {
	if x != nil {
		return x.RssiStandardDeviation
	}
	return 0
}

func (x *GatewayRxMetadata_Antenna) GetFrequencyOffset() int64 {
	if x != nil {
		return x.FrequencyOffset
	}
	return 0
}

func (x *GatewayRxMetadata_Antenna) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *GatewayRxMetadata_Antenna) GetEncryptedTime() []byte {
	if x != nil {
		return x.EncryptedTime
	}
	return nil
}

func (x *GatewayRxMetadata_Antenna) GetFineTime() int64 {
	if x != nil {
		return x.FineTime
	}
	return 0
}

type StatusMessage_OSMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Load_1           float32 `protobuf:"fixed32,1,opt,name=load_1,json=load1,proto3" json:"load_1,omitempty"`
	Load_5           float32 `protobuf:"fixed32,2,opt,name=load_5,json=load5,proto3" json:"load_5,omitempty"`
	Load_15          float32 `protobuf:"fixed32,3,opt,name=load_15,json=load15,proto3" json:"load_15,omitempty"`
	CpuPercentage    float32 `protobuf:"fixed32,11,opt,name=cpu_percentage,json=cpuPercentage,proto3" json:"cpu_percentage,omitempty"`
	MemoryPercentage float32 `protobuf:"fixed32,21,opt,name=memory_percentage,json=memoryPercentage,proto3" json:"memory_percentage,omitempty"`
	Temperature      float32 `protobuf:"fixed32,31,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *StatusMessage_OSMetrics) Reset() {
	*x = StatusMessage_OSMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusMessage_OSMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessage_OSMetrics) ProtoMessage() {}

func (x *StatusMessage_OSMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessage_OSMetrics.ProtoReflect.Descriptor instead.
func (*StatusMessage_OSMetrics) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{10, 0}
}

func (x *StatusMessage_OSMetrics) GetLoad_1() float32 {
	if x != nil {
		return x.Load_1
	}
	return 0
}

func (x *StatusMessage_OSMetrics) GetLoad_5() float32 {
	if x != nil {
		return x.Load_5
	}
	return 0
}

func (x *StatusMessage_OSMetrics) GetLoad_15() float32 {
	if x != nil {
		return x.Load_15
	}
	return 0
}

func (x *StatusMessage_OSMetrics) GetCpuPercentage() float32 {
	if x != nil {
		return x.CpuPercentage
	}
	return 0
}

func (x *StatusMessage_OSMetrics) GetMemoryPercentage() float32 {
	if x != nil {
		return x.MemoryPercentage
	}
	return 0
}

func (x *StatusMessage_OSMetrics) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

var File_router_proto protoreflect.FileDescriptor

var file_router_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x47, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x78, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x52, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x56, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x15, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x07, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61,
	0x6e, 0x22, 0x53, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07,
	0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e, 0x54, 0x78,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c,
	0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x52, 0x61, 0x57,
	0x41, 0x4e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0e,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x4c,
	0x6f, 0x52, 0x61, 0x57, 0x41, 0x4e, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x5f, 0x47, 0x45, 0x4f, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0xd2, 0x05, 0x0a, 0x11, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x52, 0x08, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad,
	0x02, 0x0a, 0x07, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x73,
	0x73, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x73,
	0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x73, 0x73, 0x69, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x72, 0x73, 0x73, 0x69, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed,
	0x01, 0x0a, 0x16, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x66, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x66, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x13, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91,
	0x07, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x70, 0x67, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x66, 0x70, 0x67, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x70, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72,
	0x74, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x72, 0x78, 0x49, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x78, 0x5f, 0x6f, 0x6b,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x78, 0x4f, 0x6b, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x6f, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x78, 0x4f, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6d, 0x5f, 0x6f, 0x6b, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x6d, 0x4f, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x6c,
	0x6d, 0x5f, 0x73, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x6d, 0x53, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6d, 0x5f, 0x6e, 0x77, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6c, 0x6d, 0x4e, 0x77, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x50, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x53,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x09, 0x4f, 0x53, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x12, 0x15, 0x0a, 0x06,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6c, 0x6f,
	0x61, 0x64, 0x35, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x31, 0x35, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2a, 0x1f, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x52, 0x41, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x53,
	0x4b, 0x10, 0x01, 0x2a, 0xc7, 0x01, 0x0a, 0x0d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x55, 0x5f, 0x38, 0x36, 0x33, 0x5f,
	0x38, 0x37, 0x30, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x53, 0x5f, 0x39, 0x30, 0x32, 0x5f,
	0x39, 0x32, 0x38, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4e, 0x5f, 0x37, 0x37, 0x39, 0x5f,
	0x37, 0x38, 0x37, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x55, 0x5f, 0x34, 0x33, 0x33, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x5f, 0x39, 0x31, 0x35, 0x5f, 0x39, 0x32, 0x38, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4e, 0x5f, 0x34, 0x37, 0x30, 0x5f, 0x35, 0x31, 0x30, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x5f, 0x39, 0x32, 0x33, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x53, 0x5f, 0x39, 0x32, 0x30, 0x5f, 0x39, 0x32, 0x33, 0x10, 0x3d, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x53, 0x5f, 0x39, 0x32, 0x33, 0x5f, 0x39, 0x32, 0x35, 0x10, 0x3e, 0x12, 0x0e, 0x0a,
	0x0a, 0x4b, 0x52, 0x5f, 0x39, 0x32, 0x30, 0x5f, 0x39, 0x32, 0x33, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x4e, 0x5f, 0x38, 0x36, 0x35, 0x5f, 0x38, 0x36, 0x37, 0x10, 0x08, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x55, 0x5f, 0x38, 0x36, 0x34, 0x5f, 0x38, 0x37, 0x30, 0x10, 0x09, 0x32, 0xc5, 0x01,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x55, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x74, 0x68, 0x65, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6c, 0x6f,
	0x72, 0x61, 0x77, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x74, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_router_proto_rawDescOnce sync.Once
	file_router_proto_rawDescData = file_router_proto_rawDesc
)

func file_router_proto_rawDescGZIP() []byte {
	file_router_proto_rawDescOnce.Do(func() {
		file_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_router_proto_rawDescData)
	})
	return file_router_proto_rawDescData
}

var file_router_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_router_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_router_proto_goTypes = []interface{}{
	(Modulation)(0),                      // 0: router.Modulation
	(FrequencyPlan)(0),                   // 1: router.FrequencyPlan
	(LocationMetadata_LocationSource)(0), // 2: router.LocationMetadata.LocationSource
	(*UplinkMessage)(nil),                // 3: router.UplinkMessage
	(*DownlinkMessage)(nil),              // 4: router.DownlinkMessage
	(*Trace)(nil),                        // 5: router.Trace
	(*ProtocolRxMetadata)(nil),           // 6: router.ProtocolRxMetadata
	(*ProtocolTxConfiguration)(nil),      // 7: router.ProtocolTxConfiguration
	(*LoRaWANMetadata)(nil),              // 8: router.LoRaWANMetadata
	(*LoRaWANTxConfiguration)(nil),       // 9: router.LoRaWANTxConfiguration
	(*LocationMetadata)(nil),             // 10: router.LocationMetadata
	(*GatewayRxMetadata)(nil),            // 11: router.GatewayRxMetadata
	(*GatewayTxConfiguration)(nil),       // 12: router.GatewayTxConfiguration
	(*StatusMessage)(nil),                // 13: router.StatusMessage
	nil,                                  // 14: router.Trace.MetadataEntry
	(*GatewayRxMetadata_Antenna)(nil),    // 15: router.GatewayRxMetadata.Antenna
	(*StatusMessage_OSMetrics)(nil),      // 16: router.StatusMessage.OSMetrics
	(*emptypb.Empty)(nil),                // 17: google.protobuf.Empty
}
var file_router_proto_depIdxs = []int32{
	6,  // 0: router.UplinkMessage.protocol_metadata:type_name -> router.ProtocolRxMetadata
	11, // 1: router.UplinkMessage.gateway_metadata:type_name -> router.GatewayRxMetadata
	5,  // 2: router.UplinkMessage.trace:type_name -> router.Trace
	7,  // 3: router.DownlinkMessage.protocol_configuration:type_name -> router.ProtocolTxConfiguration
	12, // 4: router.DownlinkMessage.gateway_configuration:type_name -> router.GatewayTxConfiguration
	5,  // 5: router.DownlinkMessage.trace:type_name -> router.Trace
	14, // 6: router.Trace.metadata:type_name -> router.Trace.MetadataEntry
	5,  // 7: router.Trace.parents:type_name -> router.Trace
	8,  // 8: router.ProtocolRxMetadata.lorawan:type_name -> router.LoRaWANMetadata
	9,  // 9: router.ProtocolTxConfiguration.lorawan:type_name -> router.LoRaWANTxConfiguration
	0,  // 10: router.LoRaWANMetadata.modulation:type_name -> router.Modulation
	1,  // 11: router.LoRaWANMetadata.frequency_plan:type_name -> router.FrequencyPlan
	0,  // 12: router.LoRaWANTxConfiguration.modulation:type_name -> router.Modulation
	2,  // 13: router.LocationMetadata.source:type_name -> router.LocationMetadata.LocationSource
	15, // 14: router.GatewayRxMetadata.antennas:type_name -> router.GatewayRxMetadata.Antenna
	10, // 15: router.GatewayRxMetadata.location:type_name -> router.LocationMetadata
	10, // 16: router.StatusMessage.location:type_name -> router.LocationMetadata
	16, // 17: router.StatusMessage.os:type_name -> router.StatusMessage.OSMetrics
	13, // 18: router.Router.GatewayStatus:input_type -> router.StatusMessage
	3,  // 19: router.Router.Uplink:input_type -> router.UplinkMessage
	17, // 20: router.Router.Subscribe:input_type -> google.protobuf.Empty
	17, // 21: router.Router.GatewayStatus:output_type -> google.protobuf.Empty
	17, // 22: router.Router.Uplink:output_type -> google.protobuf.Empty
	4,  // 23: router.Router.Subscribe:output_type -> router.DownlinkMessage
	21, // [21:24] is the sub-list for method output_type
	18, // [18:21] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_router_proto_init() }
func file_router_proto_init() {
	if File_router_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolRxMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolTxConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoRaWANMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoRaWANTxConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRxMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayTxConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRxMetadata_Antenna); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusMessage_OSMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_router_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_router_proto_goTypes,
		DependencyIndexes: file_router_proto_depIdxs,
		EnumInfos:         file_router_proto_enumTypes,
		MessageInfos:      file_router_proto_msgTypes,
	}.Build()
	File_router_proto = out.File
	file_router_proto_rawDesc = nil
	file_router_proto_goTypes = nil
	file_router_proto_depIdxs = nil
}
