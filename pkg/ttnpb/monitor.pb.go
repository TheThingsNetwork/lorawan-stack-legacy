// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: monitor.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("monitor.proto", fileDescriptor_44174b7b2a306b71) }

var fileDescriptor_44174b7b2a306b71 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8d, 0xcf, 0x6a, 0x84, 0x30,
	0x10, 0x87, 0xc9, 0xa5, 0x82, 0xb4, 0x14, 0x3c, 0xb4, 0x60, 0xc1, 0x73, 0x2f, 0x26, 0x50, 0x9f,
	0xa0, 0xc5, 0xd2, 0x93, 0xf4, 0xbe, 0xb7, 0x28, 0xb3, 0x51, 0x12, 0x33, 0x21, 0x19, 0x09, 0xbe,
	0xe1, 0x1e, 0xf7, 0x11, 0x16, 0x9f, 0x64, 0x59, 0xff, 0x1c, 0xe7, 0xc7, 0xf7, 0xcd, 0x97, 0xbe,
	0x8c, 0x68, 0x07, 0x42, 0xcf, 0x9d, 0x47, 0xc2, 0x2c, 0xd9, 0xcf, 0xfc, 0x43, 0x21, 0x2a, 0x03,
	0x62, 0x9d, 0xdb, 0xe9, 0x2c, 0x60, 0x74, 0x34, 0x6f, 0x54, 0xfe, 0xec, 0x71, 0x22, 0xd8, 0x9d,
	0xaf, 0xff, 0x34, 0x69, 0x36, 0x2b, 0xab, 0xd3, 0xd7, 0x3f, 0x49, 0x10, 0xe5, 0x5c, 0x63, 0xb4,
	0x66, 0xb0, 0x3a, 0x7b, 0xe7, 0x3b, 0x7c, 0x2c, 0x0d, 0x84, 0x20, 0x15, 0xe4, 0x6f, 0x7c, 0x4b,
	0xf0, 0x23, 0xc1, 0x7f, 0x1f, 0x89, 0x4f, 0xf6, 0xf3, 0x7d, 0x59, 0x0a, 0x76, 0x5d, 0x0a, 0x76,
	0x5b, 0x0a, 0x76, 0xaa, 0x14, 0x72, 0xea, 0x81, 0xfa, 0xc1, 0xaa, 0xc0, 0x2d, 0x50, 0x44, 0xaf,
	0x85, 0x41, 0x2f, 0xa3, 0xb4, 0x65, 0x20, 0xd9, 0xe9, 0xd2, 0x80, 0x92, 0xdd, 0x2c, 0x9c, 0x56,
	0x82, 0xc8, 0xba, 0xb6, 0x7d, 0x5a, 0x9f, 0x56, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x42,
	0xdb, 0xc6, 0xdf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitorClient is the client API for Monitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorClient interface {
	GatewayDownlink(ctx context.Context, opts ...grpc.CallOption) (Monitor_GatewayDownlinkClient, error)
}

type monitorClient struct {
	cc *grpc.ClientConn
}

func NewMonitorClient(cc *grpc.ClientConn) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) GatewayDownlink(ctx context.Context, opts ...grpc.CallOption) (Monitor_GatewayDownlinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Monitor_serviceDesc.Streams[0], "/monitor.Monitor/GatewayDownlink", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorGatewayDownlinkClient{stream}
	return x, nil
}

type Monitor_GatewayDownlinkClient interface {
	Send(*DownlinkMessage) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type monitorGatewayDownlinkClient struct {
	grpc.ClientStream
}

func (x *monitorGatewayDownlinkClient) Send(m *DownlinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorGatewayDownlinkClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorServer is the server API for Monitor service.
type MonitorServer interface {
	GatewayDownlink(Monitor_GatewayDownlinkServer) error
}

// UnimplementedMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (*UnimplementedMonitorServer) GatewayDownlink(srv Monitor_GatewayDownlinkServer) error {
	return status.Errorf(codes.Unimplemented, "method GatewayDownlink not implemented")
}

func RegisterMonitorServer(s *grpc.Server, srv MonitorServer) {
	s.RegisterService(&_Monitor_serviceDesc, srv)
}

func _Monitor_GatewayDownlink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServer).GatewayDownlink(&monitorGatewayDownlinkServer{stream})
}

type Monitor_GatewayDownlinkServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*DownlinkMessage, error)
	grpc.ServerStream
}

type monitorGatewayDownlinkServer struct {
	grpc.ServerStream
}

func (x *monitorGatewayDownlinkServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorGatewayDownlinkServer) Recv() (*DownlinkMessage, error) {
	m := new(DownlinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Monitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GatewayDownlink",
			Handler:       _Monitor_GatewayDownlink_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "monitor.proto",
}
